import { Ads } from './AdService';
import { BoostType } from '@/types/boosts';

export type RewardKind = 'revive' | 'boost1' | 'boost2' | 'boost3' | 'coins80' | 'ticket';

interface RewardHandlers {
  onRevive?: () => void;
  onBoost?: (boostId: BoostType) => void;
  onCoins?: (amount: number) => void;
  onTicket?: (amount: number) => void;
  showToast: (title: string, description: string, variant?: 'default' | 'destructive') => void;
}

// √âtat pour g√©rer le revive (1x par partie)
let reviveUsedThisRun = false;

export function resetReviveFlag() {
  reviveUsedThisRun = false;
}

export async function showRewardedFor(
  kind: RewardKind,
  handlers: RewardHandlers
): Promise<boolean> {
  const { onRevive, onBoost, onCoins, onTicket, showToast } = handlers;

  // V√©rifications d'√©ligibilit√©
  if (kind === 'revive' && reviveUsedThisRun) {
    showToast(
      "Revive d√©j√† utilis√©",
      "Tu ne peux revivre qu'une seule fois par partie.",
      'destructive'
    );
    return false;
  }

  if (!Ads.isReady()) {
    const cooldown = Ads.getCooldownRemaining();
    if (cooldown > 0) {
      showToast(
        "Pub en cooldown",
        `R√©essaye dans ${cooldown} secondes.`,
        'destructive'
      );
    } else {
      showToast(
        "Pub indisponible",
        "La pub n'est pas encore pr√™te. R√©essaye dans quelques instants.",
        'destructive'
      );
    }
    return false;
  }

  // Afficher la pub
  try {
    const success = await Ads.showRewarded(kind);

    console.log('[RewardRouter] Ads.showRewarded resolved:', { kind, success });

    if (success) {
      // Appliquer la r√©compense selon le type
      switch (kind) {
        case 'revive':
          if (onRevive) {
            console.log('[RewardRouter] Granting revive');
            onRevive();
            reviveUsedThisRun = true;
            showToast("Revive activ√© !", "Tu as √©t√© ramen√© √† la vie !");
          }
          break;

        case 'boost1':
          if (onBoost) {
            console.log('[RewardRouter] Granting boost: shield');
            onBoost('shield');
            showToast("Boost re√ßu !", "Tu as re√ßu un Bouclier üõ°Ô∏è");
          }
          break;

        case 'boost2':
          if (onBoost) {
            console.log('[RewardRouter] Granting boost: bigger_zone');
            onBoost('bigger_zone');
            showToast("Boost re√ßu !", "Tu as re√ßu une Zone plus grande üéØ");
          }
          break;

        case 'boost3':
          if (onBoost) {
            console.log('[RewardRouter] Granting boost: start_20');
            onBoost('start_20');
            showToast("Boost re√ßu !", "Tu as re√ßu un D√©marrage √† 20 üöÄ");
          }
          break;

        case 'coins80':
          if (onCoins) {
            console.log('[RewardRouter] Granting coins: 100');
            onCoins(100);
            showToast("Coins re√ßus !", "Tu as re√ßu 100 coins ! ü™ô");
          }
          break;

        case 'ticket':
          if (onTicket) {
            console.log('[RewardRouter] Granting tickets: 5');
            onTicket(5);
            showToast("Tickets re√ßus !", "Tu as re√ßu 5 tickets pour le mode Expert ! üé´");
          }
          break;
      }

      return true;
    } else {
      showToast(
        "Pub annul√©e",
        "Tu n'as pas re√ßu la r√©compense car la pub n'a pas √©t√© compl√©t√©e.",
        'destructive'
      );
      return false;
    }
  } catch (error) {
    console.error('Error showing rewarded ad:', error);
    showToast(
      "Erreur",
      "Une erreur s'est produite. R√©essaye plus tard.",
      'destructive'
    );
    return false;
  }
}
